name: build-publish-scan
on:
    push:
        branches:
          - main
permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write
  contents: read
  
jobs:
    build-publish-python:
        runs-on: ubuntu-latest
        env:
          DOCKER_REPO: 'manojk-python-local'
          IMAGE_NAME: 'my-python-image:${{ github.run_number }}' # Adjusted from my-very-cool-image
          JF_URL: https://hts2.jfrog.io
          DOCKER_CLI_EXPERIMENTAL: enabled
        steps:
            # 1. Setup JFrog CLI and authenticate via OIDC
            - name: Setup JFrog CLI
              uses: jfrog/setup-jfrog-cli@v4
              id: setup-cli
              env:
                JF_URL: ${{ env.JF_URL }}
                JF_PROJECT: ${{ vars.JF_PROJECT }}
              with:
                  # FIX: Changed to the correct provider name to resolve 403 Forbidden
                  oidc-provider-name: manojk-oci
            
            - name: Verify OIDC Outputs
              run: |
                echo "OIDC User: ${{ steps.setup-cli.outputs.oidc-user }}"
                echo "OIDC Token available: ${{ steps.setup-cli.outputs.oidc-token != '' }}"

            - name: Checkout the repository
              uses: actions/checkout@v4


            # 2. Python Dependency Configuration
            - name: configure jfrog environment
              run: |
                # FIX: Using manojk-python-virtual for resolution
                jf pip-config --repo-resolve=manojk-python-virtual

            - name: configure environment
              run: |
                pip install --upgrade pip
                python3 -m pip install --upgrade pip setuptools wheel sigstore
                wheel -h
                pip show setuptools
                echo $VIRTUAL_ENV

            - name: build project
              run: |
                jf pip install -r requirements.txt --module=jfrog-python-example
                python setup.py sdist bdist_wheel
                cd dist && echo "hashes=$(sha256sum * | base64 -w0)" >> $GITHUB_OUTPUT

            - name: publish python package
              run: |
                # FIX: Using manojk-python-virtual for publishing
                jf rt u dist/ manojk-python-virtual/example-projects/ --module=jfrog-python-example


            # 3. Docker Build, Push, and Scan Steps
            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3

            - name: Authenticate Docker
              uses: docker/login-action@v3
              with:
                # FIX: Using manojk-python-local for the registry URL
                registry: hts2-manojk-python-local.jfrog.io
                username: ${{ steps.setup-cli.outputs.oidc-user }}
                password: ${{ steps.setup-cli.outputs.oidc-token }}

            - name: Setup buildx instance
              uses: docker/setup-buildx-action@v3
              with:
                use: true
                platforms: linux/amd64,linux/arm64
                install: true

            - name: docker build through
              run: |
                docker buildx ls
                jf docker --version
                # FIX: Using manojk-python-local in the tag
                jf docker build --tag hts2-manojk-python-local.jfrog.io/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }} --platform linux/amd64,linux/arm64 --metadata-file metadata.json --push .

            - name: docker scan
              run: |
                FULL_IMAGE_TAG="hts2-manojk-python-local.jfrog.io/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}"
                # FIX: Explicitly pull the image back locally before scanning
                jf docker pull $FULL_IMAGE_TAG
                # FIX: Using manojk-python-local in the scan command
                jf docker scan $FULL_IMAGE_TAG


            # 4. Build Info and Build Scan
            - name: add docker package to build
              run: |
                echo "----------------"
                cat metadata.json
                echo "----------------"
                # Use tr to strip quotes from digest, making the final tag valid
                digest=$(cat metadata.json | jq '.["containerimage.digest"]' | tr -d '"')
                echo "digest=$digest"
                # FIX: Using manojk-python-local in the image tag for build info
                echo "hts2-manojk-python-local.jfrog.io/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}@$digest" > image-details.txt
                jf rt build-docker-create ${{ env.DOCKER_REPO }} --image-file image-details.txt

            - name: publish build info
              run: |
                jf rt build-collect-env
                jf rt build-add-dependencies .
                jf rt build-add-git
                jf rt build-publish

            - name: build scan
              run: |
                jf build-scan

            - name: Write to workflow job summary
              run: |
                NOTE=$'>[!NOTE]\n>Frog Notes \n'
                TIP=$'>[!TIP]\n>Hello JFrog\n'
                IMPORTANT=$'>[!IMPORTANT]\n>Hello IMPORTANT NOTE\n'
                WARNING=$'>[!WARNING]\n>Hello WARNING NOTE\n'
                CAUTION=$'>[!CAUTION]\n>Hello CAUTION NOTE\n'
                echo "$NOTE" >> $GITHUB_STEP_SUMMARY
                echo "$TIP" >> $GITHUB_STEP_SUMMARY
                echo "$IMPORTANT" >> $GITHUB_STEP_SUMMARY
                echo "$WARNING" >> $GITHUB_STEP_SUMMARY
                echo "$CAUTION" >> $GITHUB_STEP_SUMMARY
                
# 5. Hypothetical Job to fix the Frogbot JF_URL error
# This job is assumed to exist elsewhere in your workflow based on the last error.
# I've included it here with minimal necessary configuration to resolve the JF_URL issue.
---
    security-scan-frogbot:
      needs: build-publish-python # Ensure it runs after the image is built
      runs-on: ubuntu-latest
      env:
        # FIX: Explicitly set JF_URL here to fix the "getaddrinfo EAI_AGAIN" error
        JF_URL: https://hts2.jfrog.io
        JF_PROJECT: ${{ vars.JF_PROJECT }} # Assuming this is still needed
        # Assuming you use a GitHub token for Frogbot to open PRs, etc.
        # JF_GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
      steps:
        - name: Run Frogbot Security Scan
          uses: jfrog/frogbot@v2
          with:
            # FIX: Use the correct OIDC provider name as defined in your JFrog instance
            oidc-provider-name: manojk-oci
            # Other Frogbot parameters (e.g., watch-name, etc.) would go here
